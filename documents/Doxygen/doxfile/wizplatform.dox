
/**
 * @addtogroup usart_module
 * @{
 *
 * @fn int8 wizpf_usart_init(wizpf_usart usart, usart_param *param)
 * Initialize USART Peripheral Device.
 * @param usart USART index number (@ref wizpf_usart)
 * @param param USART Parameters to set (@ref usart_param)
 * @return RET_OK: Success
 * @return RET_NOK: Error
 *
 * @fn int32 getc_nonblk(wizpf_usart usart)
 * Get one character from USART1 (None-Blocking).
 * @param usart USART index number to get (@ref wizpf_usart)
 * @return Input Character
 *
 * @fn int32 putc(int32 ch, wizpf_usart usart)
 * Put one character to the USART you want.
 * @param ch Character to put
 * @param usart USART index number to put (@ref wizpf_usart)
 * @return Put character (same with 'ch' parameter)
 *
 * @fn int32 getc(wizpf_usart usart)
 * Get one character from the USART you want.
 * @param usart USART index number to get (@ref wizpf_usart)
 * @return Input Character
 *
 * @fn void change_std_usart(wizpf_usart usart)
 * Change Standard USART to another.
 * If you want to use printf to print string to the USART which is not standard,\n
 * you should change Standard USART through this function.
 * @param usart USART index number to set (@ref wizpf_usart)
 * 
 * @fn int putchar(int ch)
 * Put one character to Standard USART.
 * This is used by EWARM compiler as Standard IO Function.
 * @param ch Character to put
 * @return Put character (same with 'ch' parameter)
 *
 * @fn int getchar(void)
 * Get one character from Standard USART.
 * This is used by EWARM compiler as Standard IO Function.
 * @return Input Character
 *
 * @}
 */


/**
 * @addtogroup gpio_module
 * @{
 */

/**
 * @fn int8 wizpf_gpio_init(GPIO_TypeDef* GPIOx, uint16 GPIO_Pin, gpio_mode mode)
 * GPIO configuration.
 *
 * @param GPIOx GPIO The GPIO struct to configure (Ref. platform specific header file)
 * @param GPIO_Pin The Pin number to configure (Ref. platform specific header file)
 * @param mode The mode to configure (@ref gpio_mode)
 * @return RET_OK: Success
 * @return RET_NOK: Error
 */
/**
 * @fn int8 wizpf_gpio_set(GPIO_TypeDef* GPIOx, uint16 GPIO_Pin, int8 value)
 * GPIO Set.
 *
 * @warning Not implemented yet
 * @param GPIOx GPIO The GPIO struct to set (Ref. platform specific header file)
 * @param GPIO_Pin The Pin number to set (Ref. platform specific header file)
 * @param value The value to set
 * @return RET_OK: Success
 * @return RET_NOK: Error
 */
/**
 * @fn int8 wizpf_gpio_get(GPIO_TypeDef* GPIOx, uint16 GPIO_Pin)
 * GPIO Get.
 * 
 * @warning Not implemented yet
 * @param GPIOx GPIO The GPIO struct to get (Ref. platform specific header file)
 * @param GPIO_Pin The Pin number to get (Ref. platform specific header file)
 * @return VAL_HIGH: Current GPIO value is 'High'
 * @return VAL_LOW: Current GPIO value is 'Low'
 * @return RET_NOK: Error
 */

/* @} */


 
/**
 * @fn int8 wizpf_timer_init(void)
 * @ingroup timer_module
 * Initialize TIMER Peripheral Device.
 *
 * @warning Not implemented yet
 *
 * @return RET_OK: Success
 * @return RET_NOK: Error
 */
/**
 * @fn void device_HW_reset(void)
 * @ingroup netdev_con_module
 * Reset the Network Device.
 */

 

/**
 * @addtogroup platform_util_module
 * @{
 */

/**
 * @fn int8 platform_init(usart_param *up)
 * Initialize Platform.
 * 
 * This function should be called in the main function.
 * If not, you have to handle network initialization manually.
 * 
 * @param up USART Parameter Struct for USART1 Init
 * @return RET_OK: Success
 * @return RET_NOK: Error
 */
/**
 * @fn uint32 wizpf_get_systick(void)
 * Get current SysTick.
 * 
 * @return Current SysTick
 */
/**
 * @fn int32 wizpf_tick_elapse(uint32 tick)
 * Calculate Elapsed time (or Remaining time)
 * [+]value is Elapsed-time, [-]value is Remaining-time
 * 
 * @param tick The time to calculate
 * @return Elapsed time (or Remaining time)
 */
/**
 * @fn uint32 wizpf_tick_conv(bool istick2sec, uint32 tickorsec)
 * Convert Tick(Second) to Second(Tick).
 *
 * @param istick2sec TRUE: Tick->Second,  FALSE: Second->Tick
 * @param tickorsec The value to convert
 * @return Converted value
 */
/**
 * @fn void Delay_tick(uint32 tick)
 * Tick Delay Function.
 * This function is precise.
 *
 * @param tick Delay time (Default value of 1 tick is 1 ms)
 */
/**
 * @fn void Delay_us(uint8 time_us)
 * Micro-second Scale Delay Function.
 * This function is not precise
 *
 * @param time_us Delay time
 */
/**
 * @fn void Delay_ms( uint16 time_ms )
 * Mili-second Scale Delay Function.
 * This function is not precise
 *
 * @param time_ms Delay time
 */
/**
 * @fn int8 wizpf_led_set(wizpf_led led, uint8 action)
 * Set LED On/Off/Toggle.
 * 
 * @param led The LED to set (@ref wizpf_led)
 * @param action The action to set ( VAL_ON / VAL_OFF / VAL_TOG )
 * @return RET_OK: Success
 * @return RET_NOK: Error
 */
/**
 * @fn int8 wizpf_led_get(wizpf_led led)
 * Get current LED State.
 * 
 * @param led The LED to set (@ref wizpf_led)
 * @return LED State ( VAL_ON / VAL_OFF )
 */
/**
 * @fn void wizpf_led_trap(uint8 repeat)
 * Assert Function using LED.
 * 
 * @param repeat The repeat count to set
 */
/**
 * @fn void GPIO_Configuration(void)
 * @ingroup platform_util_module
 * Common GPIO Configuration.
 */
/**
 * @fn void RCC_Configuration(void)
 * @ingroup platform_util_module
 * Common RCC Configuration.
 */
/**
 * @fn void NVIC_Configuration(void)
 * @ingroup platform_util_module
 * Common NVIC Configuration.
 */

/* @} */





