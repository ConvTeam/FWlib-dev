
/**
 * 
 * @addtogroup socket_module
 * @{
 * 
 * @def SOCKSTAT_CLOSED
 * Indicate the socket is closed state.
 * It is the status that resource of SOCKETn is released.\n
 * When DISCON or CLOSE command is performed, or ARPTO, or TCPTO occurs,\n
 * it is changed to SOCK_CLOSED regardless of previous value.
 * @def SOCKSTAT_INIT
 * Indicate the socket is init state.
 * It is shown in case that Sn_MR is set as TCP and OPEN\n
 * commands are given to Sn_CR. It is changed to SOCK_INIT\n
 * when Sn_MR (P3:P0) is Sn_MR_TCP and OPEN command is\n
 * performed. It is the initial step of TCP connection establishment.\n
 * It is possible to perform LISTEN command at the "TCP SERVER" \n
 * mode and CONNECT command at the "TCP CLIENT".\n
 * It is the status that SOCKETn operates as "TCP SERVER" and\n
 * waits for connect-request (SYN packet) from "TCP CLIENT".
 * @def SOCKSTAT_LISTEN
 * Indicate the socket is listen state.
 * Socket n operates in TCP Server Mode and waits for a\n
 * connection-request (SYN packet) from a ¡°TCP CLIENT¡±.\n
 * When the LISTEN command is used, the stage changes to SOCK_LISTEN\n
 * Once the connection is established, the SOCKET state\n
 * changes from SOCK_LISTEN to SOCK_ESTABLISHED; however,\n
 * if the connection fails, TCPTO occurs (Sn_IR(TIME_OUT) ='1') and \n
 * the state changes to SOCK_CLOSED.
 * @def SOCKSTAT_SYNSENT
 * Indicate the socket is syn-sent state (momentary state).\n
 * This status indicates that a connect-request (SYN packet) is\n
 * sent to a "TCP SERVER". This status shows changing process\n
 * from SOCK_INIT to SOCK_ESTABLISHED by CONNECT\n
 * command. At this status, if connect-accept (SYN/ACK packet) \n
 * is received from "TCP SERVER", it is automatically\n
 * changed to SOCK_ ESTBLISHED. If SYN/ACK packet is not\n
 * received from the "TCP SERVER" before TCPTO occurs\n
 * (Sn_IR(TIMEOUT)=¡®1¡¯), it is changed to SOCK_CLOSED.
 * @def SOCKSTAT_SYNRECV
 * Indicate the socket is syn-received state (momentary state).
 * This status indicate that a connect-request(SYN packet) is\n
 * received from a "TCP CLIENT". It is automatically changed\n
 * to SOCK_ESTABLISHED when W5200 successfully transmits\n
 * connect-accept (SYN/ACK packet) to the "TCP CLIENT".\n
 * If it is failed, TCPTO occurs (Sn_IR(TIMEOUT)=¡®1¡¯),\n
 * and it is changed to SOCK_CLOSED
 * @def SOCKSTAT_ESTABLISHED
 * Indicate the socket is established state.
 * It is shown in case that connection is established.\n
 * It is changed to SOCK_ESTABLISHED when SYN packet from\n
 * "TCP CLIENT" is successfully processed at the SOCK_LISTEN, or\n
 * CONNECTS command is successfully performed. At this status,\n
 * DATA packet can be transferred, that is, SEND or RECV command\n
 * can be performed.
 * @def SOCKSTAT_FIN_WAIT
 * Indicate the socket is finish-wait state (momentary state).
 * These status shows that Socket n is closed. It is observed\n
 * in the disconnect-process of active close or passive close.\n
 * It is changed to SOCK_CLOSED, when disconnect-process is\n
 * successfully finished or TCPTO occurs (Sn_IR (TIMEOUT)='1').
 * @def SOCKSTAT_CLOSING
 * Indicate the socket is closing state (momentary state).
 * These status shows that Socket n is closed. It is observed\n
 * in the disconnect-process of active close or passive close.\n
 * It is changed to SOCK_CLOSED, when disconnect-process is\n
 * successfully finished or TCPTO occurs (Sn_IR (TIMEOUT) ='1').
 * @def SOCKSTAT_TIME_WAIT
 * Indicate the socket is time-wait state (momentary state).
 * These status shows that Socket n is closed. It is oserved\n
 * in the disconnect-process of active close or passive close. It\n
 * is changed to SOCK_CLOSED, when disconnect-process is\n
 * successfully finished or TCPTO occurs (Sn_IR (TIMEOUT)='1').
 * @def SOCKSTAT_CLOSE_WAIT
 * Indicate the socket is close-wait state (momentary state).
 * It is the status that disconnect-request (FIN packet) is received \n
 * from the peer As TCP connection is half-closed, it is possible \n
 * to transfer data packet. In order to complete the TCP disconnection, \n
 * DISCON command should be performed.\n
 * For SOCKETn close without disconnection-process, CLOSE\n
 * command should be just performed.
 * @def SOCKSTAT_LAST_ACK
 * Indicate the socket is last-ack state (momentary state).
 * These status shows that Socket n is closed. It is observed\n
 * in the disconnect-process of active close or passive close.\n
 * It is changed to SOCK_CLOSED, when disconnect-process \n
 * is successfully finished or TCPTO occurs (Sn_IR (TIMEOUT)='1').
 * @def SOCKSTAT_UDP
 * Indicate the socket is opened as UDP.
 * It is the status that SOCKETn is open as UDP mode. It is\n
 * changed to SOCK_UDP when Sn_MR(P3:P0) is Sn_MR_UDP\n
 * and OPEN command is performed. DATA packet can be\n
 * transferred without connection that is necessary to TCP mode SOCKET.
 *
 * @def SOCKERR_BUSY
 * Error because the socket is busy
 * @def SOCKERR_NOT_TCP
 * Error because the socket is not opened as TCP
 * @def SOCKERR_NOT_UDP
 * Error because the socket is not opened as UDP
 * @def SOCKERR_WRONG_ARG
 * Error because the parameter is wrong
 * @def SOCKERR_WRONG_STATUS
 * Error because the socket is unknown state
 * @def SOCKERR_CLOSED
 * Error because the socket is closed state
 * @def SOCKERR_CLOSE_WAIT
 * Error because the socket is close wait state
 * @def SOCKERR_FIN_WAIT
 * Error because the socket is fin wait state
 * @def SOCKERR_NOT_ESTABLISHED
 * Error because the socket is not established state
 * @def SOCKERR_WINDOW_FULL
 * Error because of network window full
 * @def SOCKERR_TIME_OUT
 * Error because of time out
 * @def SOCKERR_NULL_SRC_IP
 * Error because source IP is wrong
 * @def SOCKERR_BUF_NOT_ENOUGH
 * Error because buffer is not enough
 * @def SOCKERR_NOT_SPECIFIED
 * Error because of not specified reason
 *
 * @}
 * 
 */



/**
 * 
 * @addtogroup netdev_con_module
 * @{
 *
 * @fn void device_init(uint8 *tx_size, uint8 *rx_size)
 * @brief Initialize the w5200 device.
 * @param tx_size Tx socket buffer size array
 * @param rx_size Rx socket buffer size array
 * @return 
 * 
 * @fn void device_SW_reset(void)
 * @brief Reset w5200 device.
 * Be careful to use this because after reset the device, 
 * all register will return to reset value.
 * 
 * @fn void device_mem_init(uint8 *tx_size, uint8 *rx_size)
 * @brief Initialize the Tx, Rx buffer size as per the channels.
 * This is called by @ref device_init function.\n
 * but after network device reset by user, this may be necessary.
 * @param tx_size Tx socket buffer size array
 * @param rx_size Rx socket buffer size array
 * 
 * @fn void SetNetInfo(wiz_NetInfo *netinfo)
 * @brief This function set the network information.
 * You can set network addresses through this.\n
 * If zero address is set in variable, it will be ignored.
 * @param netinfo Network address struct @ref wiz_NetInfo
 * @see @ref ClsNetInfo,  @ref GetNetInfo
 * 
 * @fn void ClsNetInfo(netinfo_member member)
 * @brief Clear specific device address to zero.
 * @param member the member variable of @ref netinfo_member.
 *  
 * @fn void GetNetInfo(wiz_NetInfo *netinfo)
 * @brief This function get the network information.
 * @param netinfo Network address struct @ref wiz_NetInfo
 * 
 * @}
 * 
 * 
 * @addtogroup socket_module
 * @{
 *
 * @fn int8 TCPServerOpen(uint8 s, uint16 port)
 * @brief Open a TCP server socket.
 * @param s The socket number you want to open
 * @param port The port number you want to open
 * @return RET_OK: Success
 * @return <0: Error
 * 
 * @fn int8 TCPClientOpen(uint8 s, uint16 sport, uint8 *dip, uint16 dport)
 * @brief Open a TCP client socket.
 * @param s The socket number you want to open
 * @param sport The source port number you want to open
 * @param dip Destination IP Address
 * @param dport Destination Port Number
 * @return RET_OK: Success
 * @return <0: Error
 * 
 * @fn int8 TCPCltOpenNB(uint8 s, uint16 sport, uint8 *dip, uint16 dport)
 * @brief Open a TCP client socket without blocking.
 * - None-Blocking function.
 * - To use this, @ref sockwatch_run should be run in main loop.
 *
 * @param s The socket number you want to open
 * @param sport The source port number you want to open
 * @param dip Destination IP Address
 * @param dport Destination Port Number
 * @return RET_OK: Success
 * @return <0: Error
 * 
 * @fn int8 TCPConnChk(uint8 s)
 * @brief Check if a TCP Socket is connected.
 * - This is used for check when using None-Blocking functions.
 *
 * @param s The socket number you want to check
 * @return RET_OK: Connected
 * @return SOCKERR_BUSY: Not Connected yet
 * @return <0: Error
 * 
 * @fn int8 TCPClose(uint8 s)
 * @brief Close a TCP socket.
 * @param s The socket number you want to close
 * @return RET_OK: Success
 * @return <0: Error
 * 
 * @fn int8 TCPCloseNB(uint8 s)
 * @brief Close a TCP socket without blocking.
 * - None-Blocking function.
 * - To use this, @ref sockwatch_run should be run in main loop.
 *
 * @param s The socket number you want to close
 * @return RET_OK: Success
 * @return <0: Error
 * 
 * @fn int8 TCPCloseCHK(uint8 s)
 * @brief Check if a TCP Socket is closed.
 * - This is used for check when using None-Blocking functions.
 * - Wait for a few seconds to be closed after @ref TCPCloseNB is called. \n
 *   If not closed after wait, close the connection by force.
 *
 * @param s The socket number you want to check
 * @return RET_OK: Closed
 * @return SOCKERR_BUSY: Not Closed yet
 * @return <0: Error
 * 
 * @fn int8 TCPClsRcvCHK(uint8 s)
 * @brief Check TCP Connection Close which is not intentional.
 * - This is used for check when using None-Blocking functions.
 *
 * @param s The socket number you want to check
 * @return RET_OK: Closed
 * @return SOCKERR_BUSY: Not Closed
 * @return <0: Error
 * 
 * @fn int32 TCPSend(uint8 s, const int8 *buf, uint16 len)
 * @brief Send the data in TCP mode.
 * @param s The socket number you want to send
 * @param buf The data you want to send
 * @param len Length of the data to send
 * @return >=0: Sent data length
 * @return <0: Error
 * 
 * @fn int8 TCPSendNB(uint8 s, const int8 *buf, uint16 len)
 * @brief Send the data in TCP mode without blocking.
 * - None-Blocking function.
 * - To use this, @ref sockwatch_run should be run in main loop.
 *
 * @param s The socket number you want to send
 * @param buf The data you want to send
 * @param len Length of the data to send
 * @return RET_OK: Success
 * @return <0: Error
 * 
 * @fn int32 TCPReSend(uint8 s)
 * @brief Re-Send the data in TCP mode.
 * You can use this when @ref TCPSend could not send all of data.
 * @param s The socket number you want to send
 * @return >=0: Sent data length
 * @return <0: Error
 * 
 * @fn int8 TCPReSendNB(uint8 s)
 * @brief Re-Send the data in TCP mode without blocking.
 * You can use this when @ref TCPSend could not send all of data.
 * - None-Blocking function.
 * - To use this, @ref sockwatch_run should be run in main loop.
 *
 * @param s The socket number you want to send
 * @return RET_OK: Success
 * @return <0: Error
 * 
 * @fn int32 TCPSendCHK(uint8 s)
 * @brief Check if TCP Send action completed.
 * - This is used for check when using None-Blocking functions.
 *
 * @param s The socket number you want to check
 * @return SOCKERR_BUSY: Not Sent yet
 * @return >=0: Sent data length
 * @return <0: Error
 * 
 * @fn int32 TCPRecv(uint8 s, int8 *buf, uint16 len)
 * @brief Receive the data in TCP mode.
 * @param s The socket number you want to receive
 * @param buf The data you want to receive
 * @param len buf size
 * @return >=0: Sent data length
 * @return <0: Error
 * 
 * @fn int8 UDPOpen(uint8 s, uint16 port)
 * @brief Open a UDP socket.
 * @param s The socket number you want to open
 * @param port The port number you want to open
 * @return RET_OK: Success
 * @return <0: Error
 * 
 * @fn int8 UDPClose(uint8 s)
 * @brief Close a UDP socket.
 * @param s The socket number you want to close
 * @return RET_OK: Success
 * @return <0: Error
 * 
 * @fn int32 UDPSend(uint8 s, const int8 *buf, uint16 len, uint8 *addr, uint16 port)
 * @brief Send the data in UDP mode.
 * @param s The socket number you want to send
 * @param buf The data you want to send
 * @param len Length of the data to send
 * @param addr The IP Address of peer
 * @param port The Port Number of peer
 * @return >=0: Sent data length
 * @return <0: Error
 * 
 * @fn int32 UDPSendNB(uint8 s, const int8 *buf, uint16 len, uint8 *addr, uint16 port)
 * @brief Send the data in UDP mode without blocking.
 * - None-Blocking function.
 * - To use this, @ref sockwatch_run should be run in main loop.
 *
 * @param s The socket number you want to send
 * @param buf The data you want to send
 * @param len Length of the data to send
 * @param addr The IP Address of peer
 * @param port The Port Number of peer
 * @return >=0: Sent data length
 * @return <0: Error
 * 
 * @fn int8 UDPSendCHK(uint8 s)
 * @brief Check if UDP Send action completed.
 * - This is used for check when using None-Blocking functions.
 *
 * @param s The socket number you want to check
 * @return RET_OK: Sent
 * @return SOCKERR_BUSY: Not Sent yet
 * @return <0: Error
 * 
 * @fn int32 UDPRecv(uint8 s, int8 *buf, uint16 len, uint8 *addr, uint16 *port)
 * @brief Receive the data in UDP mode.
 * @param s The socket number you want to receive
 * @param buf The data you want to receive
 * @param len buf size
 * @param addr The IP Address of peer
 * @param port The Port Number of peer
 * @return >=0: Received data length
 * @return <0: Error
 *
 * @fn int8 GetTCPSocketStatus(uint8 s)
 * @brief Get the TCP socket status.
 * @param s The socket number you want to get
 * @return TCP socket status
 *  
 * @fn int8 GetUDPSocketStatus(uint8 s)
 * @brief Get the UDP socket status.
 * @param s The socket number you want to get
 * @return UDP socket status
 * 
 * @fn uint16 GetSocketTxFreeBufferSize(uint8 s)
 * @brief Get the TX free buffer size.
 * @param s The socket number you want to get
 * @return size of TX free buffer
 * 
 * @fn uint16 GetSocketRxRecvBufferSize(uint8 s)
 * @brief Get the RX recv buffer size.
 * @param s The socket number you want to get
 * @return size of RX recv buffer
 * 
 * @fn void GetDstInfo(uint8 s, uint8 *dstip, uint16 *dstport)
 * @brief Get Destination Information.
 * When connected with remote through TCP or received packet through UDP,\n
 * You can get the destination IP Address and Port by using this.
 * @param s The socket number to get address
 * @param dstip The array pointer in which IP address will enter
 * @param dstport The variable pointer in which Port number will enter
 *
 * @fn void SetSocketOption(uint8 option_type, uint16 option_value)
 * @brief Set the network option.
 * @param option_type
 * - 0: RTR(Retry Time Register)
 * - 1: RCR(Retry Count Register)
 * - 2: IMR(Interrupt Mask Register)
 * @param option_value The value you want to set
 * 
 * @}
 *
 */


 
 
 

